{"ast":null,"code":"import _objectSpread from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar api = \"https://reactnd-books-api.udacity.com\"; // Generate a unique token for storing your bookshelf data on the backend server.\n\nvar token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nvar headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n};\nexport var get = function get(bookId) {\n  return fetch(\"\".concat(api, \"/books/\").concat(bookId), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.book;\n  });\n};\nexport var getAll = function getAll() {\n  return fetch(\"\".concat(api, \"/books\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};\nexport var update = function update(book, shelf) {\n  return fetch(\"\".concat(api, \"/books/\").concat(book.id), {\n    method: 'PUT',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      shelf: shelf\n    })\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var search = function search(query) {\n  return fetch(\"\".concat(api, \"/search\"), {\n    method: 'POST',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      query: query\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query"],"mappings":";AAAA,IAAMA,GAAG,GAAG,uCAAZ,C,CAGA;;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AACA,IAAI,CAACA,KAAL,EACIA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B;AAEJ,IAAMC,OAAO,GAAG;AACZ,YAAU,kBADE;AAEZ,mBAAiBN;AAFL,CAAhB;AAKA,OAAO,IAAMO,GAAG,GAAG,SAANA,GAAM,CAACC,MAAD;AAAA,SACfC,KAAK,WAAIV,GAAJ,oBAAiBS,MAAjB,GAA2B;AAC5BF,IAAAA,OAAO,EAAPA;AAD4B,GAA3B,CAAL,CAGCI,IAHD,CAGM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAHT,EAICF,IAJD,CAIM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAT;AAAA,GAJV,CADe;AAAA,CAAZ;AAOP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SAClBN,KAAK,WAAIV,GAAJ,aAAiB;AAClBO,IAAAA,OAAO,EAAPA;AADkB,GAAjB,CAAL,CAGCI,IAHD,CAGM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAHT,EAICF,IAJD,CAIM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GAJV,CADkB;AAAA,CAAf;AAOP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACH,IAAD,EAAOI,KAAP;AAAA,SAClBT,KAAK,WAAIV,GAAJ,oBAAiBe,IAAI,CAACK,EAAtB,GAA4B;AAC7BC,IAAAA,MAAM,EAAE,KADqB;AAE7Bd,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFsB;AAM7Be,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,MAAAA,KAAK,EAALA;AADiB,KAAf;AANuB,GAA5B,CAAL,CASGR,IATH,CASQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GATX,CADkB;AAAA,CAAf;AAYP,OAAO,IAAMY,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;AAAA,SAClBhB,KAAK,WAAIV,GAAJ,cAAkB;AACnBqB,IAAAA,MAAM,EAAE,MADW;AAEnBd,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFY;AAMnBe,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBE,MAAAA,KAAK,EAALA;AADiB,KAAf;AANa,GAAlB,CAAL,CASGf,IATH,CASQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GATX,EAUCF,IAVD,CAUM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GAVV,CADkB;AAAA,CAAf","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n    token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n    'Accept': 'application/json',\n    'Authorization': token\n}\n\nexport const get = (bookId) =>\n    fetch(`${api}/books/${bookId}`, {\n        headers\n    })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n    fetch(`${api}/books`, {\n        headers\n    })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n    fetch(`${api}/books/${book.id}`, {\n        method: 'PUT',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            shelf\n        })\n    }).then(res => res.json())\n\nexport const search = (query) =>\n    fetch(`${api}/search`, {\n        method: 'POST',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            query\n        })\n    }).then(res => res.json())\n    .then(data => data.books)"]},"metadata":{},"sourceType":"module"}