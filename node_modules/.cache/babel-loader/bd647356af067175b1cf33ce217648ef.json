{"ast":null,"code":"import _classCallCheck from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/search.jsx\";\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nvar search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(search, _Component);\n\n  function search(props) {\n    var _this;\n\n    _classCallCheck(this, search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(search).call(this, props));\n\n    _this.changeShelf = function (e) {\n      if (e.target.innerText === \"Want To Read\") {\n        BooksAPI.get(e.target.id).then(function (book) {\n          BooksAPI.update(book, \"wantToRead\");\n        });\n      } else if (e.target.innerText === \"Currently Reading\") {\n        BooksAPI.get(e.target.id).then(function (book) {\n          BooksAPI.update(book, \"currentlyReading\");\n        });\n      } else if (e.target.innerText === \"Read\") {\n        BooksAPI.get(e.target.id).then(function (book) {\n          BooksAPI.update(book, \"read\");\n        });\n      }\n    };\n\n    _this.deleteSelected = function (e) {\n      //This will change the shelf of the book from none to wantToRead shelf\n      _this.changeShelf(e); //This will delete the current search list\n\n\n      var newSearch = _this.state.books.filter(function (term) {\n        return term.id !== e.target.id;\n      });\n\n      _this.setState({\n        books: newSearch\n      });\n    };\n\n    _this.searchDisplay = function () {\n      if (_this.state.books.length !== 0) {\n        return _this.state.books.map(function (item) {\n          if (item.imageLinks) {\n            return React.createElement(\"div\", {\n              id: \"book\",\n              key: item.id,\n              className: \"menuDisplay\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67\n              },\n              __self: this\n            }, React.createElement(\"img\", {\n              id: item.id,\n              src: item.imageLinks.smallThumbnail,\n              height: \"100\",\n              width: \"80\",\n              alt: item.authors,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            }), React.createElement(\"form\", {\n              id: \"locationControl\",\n              className: \"menu\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 76\n              },\n              __self: this\n            }, React.createElement(\"button\", {\n              id: item.id,\n              type: \"button\",\n              onClick: function onClick(e) {\n                return _this.deleteSelected(e);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 77\n              },\n              __self: this\n            }, \"Want To Read\"), React.createElement(\"button\", {\n              id: item.id,\n              type: \"button\",\n              onClick: function onClick(e) {\n                return _this.deleteSelected(e);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84\n              },\n              __self: this\n            }, \"Currently Reading\"), React.createElement(\"button\", {\n              id: item.id,\n              type: \"button\",\n              onClick: function onClick(e) {\n                return _this.deleteSelected(e);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91\n              },\n              __self: this\n            }, \"Read\")));\n          }\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.state = {\n      error: null,\n      books: []\n    };\n    return _this;\n  } //This will load the books with the search query\n\n\n  _createClass(search, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var parsed = queryString.parse(this.props.location.search);\n      var searchTerm = parsed.search;\n      BooksAPI.search(searchTerm).then(function (result) {\n        if (result.error !== \"empty query\") {\n          _this2.setState({\n            isLoaded: true,\n            books: result\n          });\n        }\n      }).catch(function (result) {\n        _this2.setState({\n          isLoaded: false\n        });\n      });\n    } //This method will change the shelf location of the book to the default \"wantToRead\"\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"searchfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.searchDisplay());\n    }\n  }]);\n\n  return search;\n}(Component);\n\nexport default search;","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/search.jsx"],"names":["React","Component","queryString","BooksAPI","search","props","changeShelf","e","target","innerText","get","id","then","book","update","deleteSelected","newSearch","state","books","filter","term","setState","searchDisplay","length","map","item","imageLinks","smallThumbnail","authors","error","parsed","parse","location","searchTerm","result","isLoaded","catch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      books: []\n    };\n  }\n\n  //This will load the books with the search query\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    const searchTerm = parsed.search;\n    BooksAPI.search(searchTerm)\n      .then(result => {\n        if (result.error !== \"empty query\") {\n          this.setState({\n            isLoaded: true,\n            books: result\n          });\n        }\n      })\n      .catch(result => {\n        this.setState({\n          isLoaded: false\n        });\n      });\n  }\n\n  //This method will change the shelf location of the book to the default \"wantToRead\"\n  changeShelf = e => {\n    if (e.target.innerText === \"Want To Read\") {\n      BooksAPI.get(e.target.id).then(book => {\n        BooksAPI.update(book, \"wantToRead\");\n      });\n    } else if (e.target.innerText === \"Currently Reading\") {\n      BooksAPI.get(e.target.id).then(book => {\n        BooksAPI.update(book, \"currentlyReading\");\n      });\n    } else if (e.target.innerText === \"Read\") {\n      BooksAPI.get(e.target.id).then(book => {\n        BooksAPI.update(book, \"read\");\n      });\n    }\n  };\n\n  //This will delete the selected book\n  deleteSelected = e => {\n    //This will change the shelf of the book from none to wantToRead shelf\n    this.changeShelf(e);\n\n    //This will delete the current search list\n    const newSearch = this.state.books.filter(term => term.id !== e.target.id);\n    this.setState({ books: newSearch });\n  };\n\n  //This will display the books\n  searchDisplay = () => {\n    if (this.state.books.length !== 0) {\n      return this.state.books.map(item => {\n        if (item.imageLinks) {\n          return (\n            <div id=\"book\" key={item.id} className=\"menuDisplay\">\n              <img\n                id={item.id}\n                src={item.imageLinks.smallThumbnail}\n                height=\"100\"\n                width=\"80\"\n                alt={item.authors}\n              />\n\n              <form id=\"locationControl\" className=\"menu\">\n                <button\n                  id={item.id}\n                  type=\"button\"\n                  onClick={e => this.deleteSelected(e)}\n                >\n                  Want To Read\n                </button>\n                <button\n                  id={item.id}\n                  type=\"button\"\n                  onClick={e => this.deleteSelected(e)}\n                >\n                  Currently Reading\n                </button>\n                <button\n                  id={item.id}\n                  type=\"button\"\n                  onClick={e => this.deleteSelected(e)}\n                >\n                  Read\n                </button>\n              </form>\n            </div>\n          );\n        }\n      });\n    } else {\n      return <div />;\n    }\n  };\n\n  render() {\n    return <div id=\"searchfield\">{this.searchDisplay()}</div>;\n  }\n}\n\nexport default search;\n"]},"metadata":{},"sourceType":"module"}