{"ast":null,"code":"import _classCallCheck from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/wantToRead.jsx\";\nimport React, { Component } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nvar wantToRead =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(wantToRead, _Component);\n\n  function wantToRead(props) {\n    var _this;\n\n    _classCallCheck(this, wantToRead);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(wantToRead).call(this, props));\n\n    _this.toggleMenu = function () {\n      if (_this.state.selected === true) {\n        _this.setState(function (prevState) {\n          return {\n            isToggleOn: !prevState.isToggleOn\n          };\n        });\n      }\n    };\n\n    _this.displayBooks = function () {\n      return _this.props.bookList.map(function (item) {\n        if (item.shelf === \"wantToRead\") {\n          return React.createElement(\"div\", {\n            key: item.id,\n            id: \"book\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            id: item.id,\n            src: item.imageLinks.smallThumbnail,\n            height: \"100\",\n            width: \"80\",\n            location: item.location,\n            alt: item.authors,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            type: \"button\",\n            onClick: _this.toggleMenu,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, React.createElement(\"ion-icon\", {\n            name: \"add-circle\",\n            size: \"large\",\n            onClick: _this.selected,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          })), React.createElement(\"form\", {\n            id: \"locationControl\",\n            style: {\n              display: _this.state.isToggleOn ? \"block\" : \"none\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, \"Want To Read\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, \"Currently Reading\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, \"Read\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, \"None\")));\n        }\n      });\n    };\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        className: \"wantToRead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Want to Read\"), React.createElement(\"hr\", {\n        className: \"style-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"wanttoreadcontainer\",\n        id: \"book\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), _this.displayBooks());\n    };\n\n    _this.state = {\n      isToggleOn: false,\n      selected: true\n    };\n    _this.toggleMenu = _this.toggleMenu.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //This will toggle the menu when the button is clicked\n\n\n  return wantToRead;\n}(Component);\n\nexport default wantToRead;","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/wantToRead.jsx"],"names":["React","Component","BooksAPI","wantToRead","props","toggleMenu","state","selected","setState","prevState","isToggleOn","displayBooks","bookList","map","item","shelf","id","imageLinks","smallThumbnail","location","authors","display","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass wantToRead extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggleOn: false,\n      selected: true\n    };\n\n    this.toggleMenu = this.toggleMenu.bind(this);\n  }\n\n  //This will toggle the menu when the button is clicked\n  toggleMenu = () => {\n    if (this.state.selected === true) {\n      this.setState(prevState => ({\n        isToggleOn: !prevState.isToggleOn\n      }));\n    }\n  };\n\n  //This creates books based on the location of the books\n  displayBooks = () => {\n    return this.props.bookList.map(item => {\n      if (item.shelf === \"wantToRead\") {\n        return (\n          <div key={item.id} id=\"book\">\n            <img\n              id={item.id}\n              src={item.imageLinks.smallThumbnail}\n              height=\"100\"\n              width=\"80\"\n              location={item.location}\n              alt={item.authors}\n            />\n            <button type=\"button\" onClick={this.toggleMenu}>\n              <ion-icon\n                name=\"add-circle\"\n                size=\"large\"\n                onClick={this.selected}\n              />\n            </button>\n            <form\n              id=\"locationControl\"\n              style={{ display: this.state.isToggleOn ? \"block\" : \"none\" }}\n            >\n              <button type=\"button\">Want To Read</button>\n              <button type=\"button\">Currently Reading</button>\n              <button type=\"button\">Read</button>\n              <button type=\"button\">None</button>\n            </form>\n          </div>\n        );\n      }\n    });\n  };\n\n  render = () => {\n    return (\n      <div className=\"wantToRead\">\n        <h2 className=\"heading\">Want to Read</h2>\n        <hr className=\"style-two\" />\n        <div className=\"wanttoreadcontainer\" id=\"book\" />\n        {this.displayBooks()}\n      </div>\n    );\n  };\n}\n\nexport default wantToRead;\n"]},"metadata":{},"sourceType":"module"}