{"ast":null,"code":"import _defineProperty from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/wantToRead.jsx\";\nimport React, { Component } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nvar wantToRead =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(wantToRead, _Component);\n\n  function wantToRead(props) {\n    var _this;\n\n    _classCallCheck(this, wantToRead);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(wantToRead).call(this, props)); //this holds the status of display for each book\n\n    _this.componentDidUpdate = function () {\n      var wantToReadBook = {}; //This is the wantToReadBook object that will hold book id and toggle state\n\n      var key; //key to the book objects\n\n      _this.props.bookList.map(function (item) {\n        key = item.id;\n\n        if (item.shelf === \"wantToRead\") {\n          wantToReadBook[key] = {\n            id: item.id,\n            isToggleOn: false\n          };\n          _this.state.wantToReadBookList[key] = wantToReadBook[key];\n        }\n      });\n\n      _this.setState();\n    };\n\n    _this.toggleMenu = function (e) {\n      _this.state.wantToReadBookList[e.target.id].isToggleOn = !_this.state.wantToReadBookList[e.target.id].isToggleOn;\n\n      _this.setState();\n\n      console.log(_this.state.wantToReadBookList[e.target.id].isToggleOn);\n    };\n\n    _this.select = function (item) {\n      return _this.state.wantToReadBookList[item.target.id] ? \"block\" : \"none\";\n    };\n\n    _this.displayBooks = function () {\n      return _this.props.bookList.map(function (item) {\n        if (item.shelf === \"wantToRead\") {\n          var _React$createElement;\n\n          return React.createElement(\"div\", (_React$createElement = {\n            id: item.id\n          }, _defineProperty(_React$createElement, \"id\", \"book\"), _defineProperty(_React$createElement, \"__source\", {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), React.createElement(\"img\", {\n            id: item.id,\n            src: item.imageLinks.smallThumbnail,\n            height: \"100\",\n            width: \"80\",\n            location: item.location,\n            alt: item.authors,\n            onClick: function onClick(e) {\n              return _this.toggleMenu(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }), React.createElement(\"form\", {\n            id: \"locationControl\",\n            onChange: function onChange(e) {\n              return _this.select(e);\n            },\n            style: {\n              display: _this.select\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, \"Want To Read\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, \"Currently Reading\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, \"Read\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, \"None\")));\n        }\n      });\n    };\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        className: \"wantToRead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Want to Read\"), React.createElement(\"hr\", {\n        className: \"style-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"wanttoreadcontainer\",\n        id: \"book\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), _this.displayBooks());\n    };\n\n    _this.state = {\n      wantToReadBookList: {}\n    };\n    _this.toggleMenu = _this.toggleMenu.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //This will get the ids of each book and associate each id with a toggle state\n\n\n  return wantToRead;\n}(Component);\n\nexport default wantToRead;","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/wantToRead.jsx"],"names":["React","Component","BooksAPI","wantToRead","props","componentDidUpdate","wantToReadBook","key","bookList","map","item","id","shelf","isToggleOn","state","wantToReadBookList","setState","toggleMenu","e","target","console","log","select","displayBooks","imageLinks","smallThumbnail","location","authors","display","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass wantToRead extends Component {\n  constructor(props) {\n    super(props);\n\n    //this holds the status of display for each book\n    this.state = {\n      wantToReadBookList: {}\n    };\n\n    this.toggleMenu = this.toggleMenu.bind(this);\n  }\n\n  //This will get the ids of each book and associate each id with a toggle state\n  componentDidUpdate = () => {\n    let wantToReadBook = {}; //This is the wantToReadBook object that will hold book id and toggle state\n    let key; //key to the book objects\n    this.props.bookList.map(item => {\n      key = item.id;\n      if (item.shelf === \"wantToRead\") {\n        wantToReadBook[key] = { id: item.id, isToggleOn: false };\n        this.state.wantToReadBookList[key] = wantToReadBook[key];\n      }\n    });\n    this.setState();\n  };\n\n  //This will toggle the menu from the state\n  toggleMenu = e => {\n    this.state.wantToReadBookList[e.target.id].isToggleOn = !this.state\n      .wantToReadBookList[e.target.id].isToggleOn;\n    this.setState();\n    console.log(this.state.wantToReadBookList[e.target.id].isToggleOn);\n  };\n\n  //This will toggle the menu for the display\n  select = item => {\n    return this.state.wantToReadBookList[item.target.id] ? \"block\" : \"none\";\n  };\n\n  //This creates books based on the location of the books\n  displayBooks = () => {\n    return this.props.bookList.map(item => {\n      if (item.shelf === \"wantToRead\") {\n        return (\n          <div id={item.id} id=\"book\">\n            <img\n              id={item.id}\n              src={item.imageLinks.smallThumbnail}\n              height=\"100\"\n              width=\"80\"\n              location={item.location}\n              alt={item.authors}\n              onClick={e => this.toggleMenu(e)}\n            />\n            <form\n              id=\"locationControl\"\n              onChange={e => this.select(e)}\n              style={{ display: this.select }}\n            >\n              <button type=\"button\">Want To Read</button>\n              <button type=\"button\">Currently Reading</button>\n              <button type=\"button\">Read</button>\n              <button type=\"button\">None</button>\n            </form>\n          </div>\n        );\n      }\n    });\n  };\n\n  render = () => {\n    return (\n      <div className=\"wantToRead\">\n        <h2 className=\"heading\">Want to Read</h2>\n        <hr className=\"style-two\" />\n        <div className=\"wanttoreadcontainer\" id=\"book\" />\n        {this.displayBooks()}\n      </div>\n    );\n  };\n}\n\nexport default wantToRead;\n"]},"metadata":{},"sourceType":"module"}