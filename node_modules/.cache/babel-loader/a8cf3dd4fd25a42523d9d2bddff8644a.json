{"ast":null,"code":"import _defineProperty from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/wantToRead.jsx\";\nimport React, { Component } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nvar wantToRead =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(wantToRead, _Component);\n\n  function wantToRead(props) {\n    var _this;\n\n    _classCallCheck(this, wantToRead);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(wantToRead).call(this, props)); //this holds the status of display for each book\n\n    _this.componentDidUpdate = function () {\n      var wantToReadBookList = []; //This array will get pushed in the state.\n\n      var wantToReadBook = {}; //This is the wantToReadBook object that will hold book id and toggle state\n\n      _this.props.bookList.map(function (item) {\n        if (item.shelf === \"wantToRead\") {\n          wantToReadBook.id = item.id;\n          wantToReadBook.toggle = false;\n        }\n\n        wantToReadBookList.push(wantToReadBook);\n      });\n\n      console.log(wantToReadBookList);\n    };\n\n    _this.toggleMenu = function (e) {\n      if (e.target.id) {\n        _this.setState(function (state) {\n          return {\n            isToggleOn: !state.isToggleOn\n          };\n        });\n      }\n    };\n\n    _this.displayBooks = function () {\n      return _this.props.bookList.map(function (item) {\n        if (item.shelf === \"wantToRead\") {\n          var _React$createElement;\n\n          return React.createElement(\"div\", (_React$createElement = {\n            id: item.id\n          }, _defineProperty(_React$createElement, \"id\", \"book\"), _defineProperty(_React$createElement, \"__source\", {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), React.createElement(\"img\", {\n            id: item.id,\n            src: item.imageLinks.smallThumbnail,\n            height: \"100\",\n            width: \"80\",\n            location: item.location,\n            alt: item.authors,\n            onClick: function onClick(e) {\n              return _this.toggleMenu(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }), React.createElement(\"form\", {\n            id: \"locationControl\",\n            style: {\n              display: _this.state.isToggleOn ? \"block\" : \"none\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, \"Want To Read\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \"Currently Reading\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, \"Read\"), React.createElement(\"button\", {\n            type: \"button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, \"None\")));\n        }\n      });\n    };\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        className: \"wantToRead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Want to Read\"), React.createElement(\"hr\", {\n        className: \"style-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"wanttoreadcontainer\",\n        id: \"book\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), _this.displayBooks());\n    };\n\n    _this.state = {};\n    _this.toggleMenu = _this.toggleMenu.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //This will get the ids of each book and associate each id with a toggle state\n\n\n  return wantToRead;\n}(Component);\n\nexport default wantToRead;","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/wantToRead.jsx"],"names":["React","Component","BooksAPI","wantToRead","props","componentDidUpdate","wantToReadBookList","wantToReadBook","bookList","map","item","shelf","id","toggle","push","console","log","toggleMenu","e","target","setState","state","isToggleOn","displayBooks","imageLinks","smallThumbnail","location","authors","display","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass wantToRead extends Component {\n  constructor(props) {\n    super(props);\n\n    //this holds the status of display for each book\n    this.state = {};\n\n    this.toggleMenu = this.toggleMenu.bind(this);\n  }\n\n  //This will get the ids of each book and associate each id with a toggle state\n  componentDidUpdate = () => {\n    let wantToReadBookList = []; //This array will get pushed in the state.\n    let wantToReadBook = {}; //This is the wantToReadBook object that will hold book id and toggle state\n\n    this.props.bookList.map(item => {\n      if (item.shelf === \"wantToRead\") {\n        wantToReadBook.id = item.id;\n        wantToReadBook.toggle = false;\n      }\n      wantToReadBookList.push(wantToReadBook);\n    });\n    console.log(wantToReadBookList);\n  };\n\n  //This will toggle the menu when the button is clicked\n  toggleMenu = e => {\n    if (e.target.id) {\n      this.setState(state => ({\n        isToggleOn: !state.isToggleOn\n      }));\n    }\n  };\n\n  //This creates books based on the location of the books\n  displayBooks = () => {\n    return this.props.bookList.map(item => {\n      if (item.shelf === \"wantToRead\") {\n        return (\n          <div id={item.id} id=\"book\">\n            <img\n              id={item.id}\n              src={item.imageLinks.smallThumbnail}\n              height=\"100\"\n              width=\"80\"\n              location={item.location}\n              alt={item.authors}\n              onClick={e => this.toggleMenu(e)}\n            />\n            <form\n              id=\"locationControl\"\n              style={{ display: this.state.isToggleOn ? \"block\" : \"none\" }}\n            >\n              <button type=\"button\">Want To Read</button>\n              <button type=\"button\">Currently Reading</button>\n              <button type=\"button\">Read</button>\n              <button type=\"button\">None</button>\n            </form>\n          </div>\n        );\n      }\n    });\n  };\n\n  render = () => {\n    return (\n      <div className=\"wantToRead\">\n        <h2 className=\"heading\">Want to Read</h2>\n        <hr className=\"style-two\" />\n        <div className=\"wanttoreadcontainer\" id=\"book\" />\n        {this.displayBooks()}\n      </div>\n    );\n  };\n}\n\nexport default wantToRead;\n"]},"metadata":{},"sourceType":"module"}