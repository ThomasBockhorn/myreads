{"ast":null,"code":"import _classCallCheck from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/main.jsx\";\nimport React, { Component } from \"react\";\nimport WantToRead from \"./wantToRead\";\nimport CurrentlyReading from \"./currentlyReading\";\nimport Read from \"./read\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nvar main =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(main, _Component);\n\n  function main(props) {\n    var _this;\n\n    _classCallCheck(this, main);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(main).call(this, props));\n\n    _this.componentDidMount = function () {\n      BooksAPI.getAll().then(function (book) {\n        _this.state.books = book;\n\n        _this.setState(_this.state.books);\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    };\n\n    _this.componentWillUpdate = function () {\n      BooksAPI.getAll().then(function (book) {\n        _this.state.books = book;\n\n        _this.setState(_this.state.books);\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    };\n\n    _this.moveBook = function (e) {\n      _this.state.books.map(function (book) {\n        if (e.target.innerText === \"Want To Read\") {\n          if (book.id === e.target.id) {\n            book.shelf = \"wantToRead\";\n\n            _this.setState();\n          }\n        } else if (e.target.innerText === \"Currently Reading\") {\n          if (book.id === e.target.id) {\n            book.shelf = \"currentlyReading\";\n\n            _this.setState();\n          }\n        } else if (e.target.innerText === \"Read\") {\n          if (book.id === e.target.id) {\n            book.shelf = \"read\";\n\n            _this.setState();\n          }\n        } else {\n          if (book.id === e.target.id) {\n            book.shelf = \"none\";\n\n            _this.setState();\n          }\n        } //Updates server\n\n\n        BooksAPI.get(book.id).then(function (item) {\n          return BooksAPI.update(item, book.shelf);\n        });\n      });\n    };\n\n    _this.state = {\n      books: [],\n      display: \"none\"\n    };\n    return _this;\n  } //This will load all the books from BooksAPI\n\n\n  _createClass(main, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(WantToRead, {\n        bookList: this.state.books,\n        moveBook: this.moveBook,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(CurrentlyReading, {\n        bookList: this.state.books,\n        moveBook: this.moveBook,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(Read, {\n        bookList: this.state.books,\n        moveBook: this.moveBook,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return main;\n}(Component);\n\nexport default main;","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/main.jsx"],"names":["React","Component","WantToRead","CurrentlyReading","Read","BooksAPI","main","props","componentDidMount","getAll","then","book","state","books","setState","catch","error","console","log","componentWillUpdate","moveBook","e","map","target","innerText","id","shelf","get","item","update","display"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport WantToRead from \"./wantToRead\";\nimport CurrentlyReading from \"./currentlyReading\";\nimport Read from \"./read\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      display: \"none\"\n    };\n  }\n\n  //This will load all the books from BooksAPI\n  componentDidMount = () => {\n    BooksAPI.getAll()\n      .then(book => {\n        this.state.books = book;\n        this.setState(this.state.books);\n      })\n      .catch(error => console.log(error));\n  };\n\n  //This will update the books from BookAPI\n  componentWillUpdate = () => {\n    BooksAPI.getAll()\n      .then(book => {\n        this.state.books = book;\n        this.setState(this.state.books);\n      })\n      .catch(error => console.log(error));\n  };\n\n  //This method will move the book to other shelves\n  moveBook = e => {\n    this.state.books.map(book => {\n      if (e.target.innerText === \"Want To Read\") {\n        if (book.id === e.target.id) {\n          book.shelf = \"wantToRead\";\n          this.setState();\n        }\n      } else if (e.target.innerText === \"Currently Reading\") {\n        if (book.id === e.target.id) {\n          book.shelf = \"currentlyReading\";\n          this.setState();\n        }\n      } else if (e.target.innerText === \"Read\") {\n        if (book.id === e.target.id) {\n          book.shelf = \"read\";\n          this.setState();\n        }\n      } else {\n        if (book.id === e.target.id) {\n          book.shelf = \"none\";\n          this.setState();\n        }\n      }\n\n      //Updates server\n      BooksAPI.get(book.id).then(item => BooksAPI.update(item, book.shelf));\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"main\">\n        <WantToRead bookList={this.state.books} moveBook={this.moveBook} />\n        <CurrentlyReading\n          bookList={this.state.books}\n          moveBook={this.moveBook}\n        />\n        <Read bookList={this.state.books} moveBook={this.moveBook} />\n      </div>\n    );\n  }\n}\n\nexport default main;\n"]},"metadata":{},"sourceType":"module"}