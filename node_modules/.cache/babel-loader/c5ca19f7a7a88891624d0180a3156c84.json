{"ast":null,"code":"import _classCallCheck from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/search.jsx\";\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nvar search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(search, _Component);\n\n  function search(props) {\n    var _this;\n\n    _classCallCheck(this, search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(search).call(this, props));\n    _this.state = {\n      error: null,\n      books: []\n    };\n    return _this;\n  } //This will load the books with the search query\n\n\n  _createClass(search, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var parsed = queryString.parse(this.props.location.search);\n      var searchTerm = parsed.search;\n      BooksAPI.search(searchTerm).then(function (result) {\n        if (result.error !== \"empty query\") {\n          _this2.setState({\n            isLoaded: true,\n            books: result\n          });\n        }\n      }).catch(function (result) {\n        _this2.setState({\n          isLoaded: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Hello Me\"));\n    }\n  }]);\n\n  return search;\n}(Component);\n\nexport default search;","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/search.jsx"],"names":["React","Component","queryString","BooksAPI","search","props","state","error","books","parsed","parse","location","searchTerm","then","result","setState","isLoaded","catch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;;IAEMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAFiB;AAMlB,G,CAED;;;;;wCACoB;AAAA;;AAClB,UAAMC,MAAM,GAAGP,WAAW,CAACQ,KAAZ,CAAkB,KAAKL,KAAL,CAAWM,QAAX,CAAoBP,MAAtC,CAAf;AACA,UAAMQ,UAAU,GAAGH,MAAM,CAACL,MAA1B;AACAD,MAAAA,QAAQ,CAACC,MAAT,CAAgBQ,UAAhB,EACGC,IADH,CACQ,UAAAC,MAAM,EAAI;AACd,YAAIA,MAAM,CAACP,KAAP,KAAiB,aAArB,EAAoC;AAClC,UAAA,MAAI,CAACQ,QAAL,CAAc;AACZC,YAAAA,QAAQ,EAAE,IADE;AAEZR,YAAAA,KAAK,EAAEM;AAFK,WAAd;AAID;AACF,OARH,EASGG,KATH,CASS,UAAAH,MAAM,EAAI;AACf,QAAA,MAAI,CAACC,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD,OAbH;AAcD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAKD;;;;EAnCkBf,S;;AAsCrB,eAAeG,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      books: []\n    };\n  }\n\n  //This will load the books with the search query\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    const searchTerm = parsed.search;\n    BooksAPI.search(searchTerm)\n      .then(result => {\n        if (result.error !== \"empty query\") {\n          this.setState({\n            isLoaded: true,\n            books: result\n          });\n        }\n      })\n      .catch(result => {\n        this.setState({\n          isLoaded: false\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello Me</h1>\n      </div>\n    );\n  }\n}\n\nexport default search;\n"]},"metadata":{},"sourceType":"module"}