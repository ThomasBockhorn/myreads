{"ast":null,"code":"import _classCallCheck from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thomasbockhorn/Desktop/myreads/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/search.jsx\";\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nvar search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(search, _Component);\n\n  function search(props) {\n    var _this;\n\n    _classCallCheck(this, search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(search).call(this, props));\n\n    _this.changeShelf = function (book) {\n      console.log(book.target.id);\n      BooksAPI.get(book.target.id).then(function (book) {\n        return BooksAPI.update(book, \"wantToRead\");\n      });\n      BooksAPI.get(book.target.id).then(function (item) {\n        return console.log(item);\n      });\n    };\n\n    _this.deleteSelected = function (e) {\n      //This will change the shelf of the book from none to wantToRead shelf\n      _this.changeShelf(e); //This will delete the current search list\n\n\n      var newSearch = _this.state.books.filter(function (term) {\n        return term.id !== e.target.id;\n      });\n\n      _this.setState({\n        books: newSearch\n      });\n    };\n\n    _this.searchDisplay = function () {\n      if (_this.state.books.length !== 0) {\n        return _this.state.books.map(function (item) {\n          if (!!item.imageLinks) {\n            return React.createElement(\"div\", {\n              id: \"book\",\n              key: item.id,\n              onClick: function onClick(e) {\n                _this.deleteSelected(e);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 59\n              },\n              __self: this\n            }, React.createElement(\"img\", {\n              id: item.id,\n              src: item.imageLinks.smallThumbnail,\n              height: \"100\",\n              width: \"80\",\n              alt: item.authors,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 66\n              },\n              __self: this\n            }));\n          }\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.state = {\n      error: null,\n      books: []\n    };\n    return _this;\n  } //This will load the books with the search query\n\n\n  _createClass(search, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var parsed = queryString.parse(this.props.location.search);\n      var searchTerm = parsed.search;\n      BooksAPI.search(searchTerm).then(function (result) {\n        if (result.error !== \"empty query\") {\n          _this2.setState({\n            isLoaded: true,\n            books: result\n          });\n        }\n      }).catch(function (result) {\n        _this2.setState({\n          isLoaded: false\n        });\n      });\n    } //This method will change the shelf location of the book\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"searchfield\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.searchDisplay());\n    }\n  }]);\n\n  return search;\n}(Component);\n\nexport default search;","map":{"version":3,"sources":["/Users/thomasbockhorn/Desktop/myreads/myreads/src/components/search.jsx"],"names":["React","Component","queryString","BooksAPI","search","props","changeShelf","book","console","log","target","id","get","then","update","item","deleteSelected","e","newSearch","state","books","filter","term","setState","searchDisplay","length","map","imageLinks","smallThumbnail","authors","error","parsed","parse","location","searchTerm","result","isLoaded","catch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      books: []\n    };\n  }\n\n  //This will load the books with the search query\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    const searchTerm = parsed.search;\n    BooksAPI.search(searchTerm)\n      .then(result => {\n        if (result.error !== \"empty query\") {\n          this.setState({\n            isLoaded: true,\n            books: result\n          });\n        }\n      })\n      .catch(result => {\n        this.setState({\n          isLoaded: false\n        });\n      });\n  }\n\n  //This method will change the shelf location of the book\n  changeShelf = book => {\n    console.log(book.target.id);\n    BooksAPI.get(book.target.id).then(book =>\n      BooksAPI.update(book, \"wantToRead\")\n    );\n    BooksAPI.get(book.target.id).then(item => console.log(item));\n  };\n\n  //This will delete the selected book\n  deleteSelected = e => {\n    //This will change the shelf of the book from none to wantToRead shelf\n    this.changeShelf(e);\n\n    //This will delete the current search list\n    const newSearch = this.state.books.filter(term => term.id !== e.target.id);\n    this.setState({ books: newSearch });\n  };\n\n  //This will display the books\n  searchDisplay = () => {\n    if (this.state.books.length !== 0) {\n      return this.state.books.map(item => {\n        if (!!item.imageLinks) {\n          return (\n            <div\n              id=\"book\"\n              key={item.id}\n              onClick={e => {\n                this.deleteSelected(e);\n              }}\n            >\n              <img\n                id={item.id}\n                src={item.imageLinks.smallThumbnail}\n                height=\"100\"\n                width=\"80\"\n                alt={item.authors}\n              />\n            </div>\n          );\n        }\n      });\n    } else {\n      return <div />;\n    }\n  };\n\n  render() {\n    return <div id=\"searchfield\">{this.searchDisplay()}</div>;\n  }\n}\n\nexport default search;\n"]},"metadata":{},"sourceType":"module"}